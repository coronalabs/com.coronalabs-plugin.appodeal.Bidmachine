// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidMachineDisplayCore
import BidMachineApiCore
import BidMachineBiddingCore
@_exported import BidMachineDisplayCore
import Foundation
import Swift
import UIKit
import _Concurrency
@_hasMissingDesignatedInitializers public class DisplayManager {
  @objc deinit
}
extension BidMachineDisplayCore.DisplayManager {
  public static func displayAd(_ bids: [BidMachineBiddingCore.BiddingBidProtocol], _ creativeInfo: BidMachineDisplayCore.DisplayCreativeInfo) throws -> BidMachineDisplayCore.DisplayAdProtocol
}
public enum CreativeType {
  case unknown
  case display
  case video
  case native
  public static func == (a: BidMachineDisplayCore.CreativeType, b: BidMachineDisplayCore.CreativeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DisplayCreativeInfo {
  var id: Swift.String? { get }
  var biddingUnitId: Swift.String { get }
  var type: BidMachineDisplayCore.CreativeType { get }
  var price: Swift.Double { get }
  var displayManager: Swift.String { get }
  var renderingInfo: [Swift.String : Any] { get }
  var customParams: [Swift.String : Any] { get }
  var visiblePercent: Swift.Double { get }
  var expirationTime: Swift.UInt32 { get }
}
public enum DisplayEventType {
  case loading
  case presenting
  case dismissing
  case screenPresenting
  case screenDismissing
  case action
  case reward
  case impression
  case click
  case container
  case expired
  public static func == (a: BidMachineDisplayCore.DisplayEventType, b: BidMachineDisplayCore.DisplayEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DisplayEvent {
  final public let type: BidMachineDisplayCore.DisplayEventType
  @objc deinit
}
extension BidMachineDisplayCore.DisplayEvent {
  final public var isTracked: Swift.Bool {
    get
  }
  final public var duration: Swift.UInt64 {
    get
  }
  final public var startTime: Swift.UInt64 {
    get
  }
  final public var finishTime: Swift.UInt64 {
    get
  }
  final public var error: Swift.Error? {
    get
  }
}
extension BidMachineDisplayCore.DisplayEvent {
  final public var description: Swift.String {
    get
  }
}
public protocol DisplayAdExpirationMetricDelegate : AnyObject {
  func didTrackExpired(_ metric: BidMachineDisplayCore.DisplayAdExpirationMetricProtocol)
}
extension BidMachineDisplayCore.DisplayAdExpirationMetricDelegate {
  public func didTrackExpired(_ metric: BidMachineDisplayCore.DisplayAdExpirationMetricProtocol)
}
public protocol DisplayAdExpirationMetricProtocol {
  init(_ info: BidMachineDisplayCore.DisplayCreativeInfo, _ delegate: BidMachineDisplayCore.DisplayAdExpirationMetricDelegate)
  func startExpiration()
  func invalidate()
}
public protocol DisplayEventControllerDelegate : AnyObject {
  func didReceiveEvent(_ event: BidMachineDisplayCore.DisplayEvent)
}
public typealias DisplayAdRouterType = BidMachineBiddingCore.BiddingAdapterDefaultSourceRouterProtocol & BidMachineBiddingCore.BiddingAdapterSourceRouterProtocol
public protocol DisplayAdProtocol {
  var id: Swift.String { get }
  var bid: BidMachineBiddingCore.BiddingBidProtocol { get }
  var creativeInfo: BidMachineDisplayCore.DisplayCreativeInfo { get }
  var eventDelegate: BidMachineDisplayCore.DisplayEventControllerDelegate? { get set }
  var router: BidMachineDisplayCore.DisplayAdRouterType { get }
  func load() throws
  func present() throws
  func invalidate()
  func registerViewabilityMetric(_ metric: BidMachineDisplayCore.DisplayAdViewabilityMetricProtocol.Type)
  func registerExpirationMetric(_ metric: BidMachineDisplayCore.DisplayAdExpirationMetricProtocol.Type)
}
public protocol DisplayAdViewabilityMetricDelegate : AnyObject {
  func didTrackViewability(_ metric: BidMachineDisplayCore.DisplayAdViewabilityMetricProtocol)
  func didFinishViewability(_ metric: BidMachineDisplayCore.DisplayAdViewabilityMetricProtocol)
}
extension BidMachineDisplayCore.DisplayAdViewabilityMetricDelegate {
  public func didTrackViewability(_ metric: BidMachineDisplayCore.DisplayAdViewabilityMetricProtocol)
  public func didFinishViewability(_ metric: BidMachineDisplayCore.DisplayAdViewabilityMetricProtocol)
}
public protocol DisplayAdViewabilityMetricProtocol {
  init(_ info: BidMachineDisplayCore.DisplayCreativeInfo, _ delegate: BidMachineDisplayCore.DisplayAdViewabilityMetricDelegate)
  func startViewability(_ continer: UIKit.UIView, _ subviews: [UIKit.UIView])
  func invalidate()
}
extension BidMachineDisplayCore.CreativeType : Swift.Equatable {}
extension BidMachineDisplayCore.CreativeType : Swift.Hashable {}
extension BidMachineDisplayCore.DisplayEventType : Swift.Equatable {}
extension BidMachineDisplayCore.DisplayEventType : Swift.Hashable {}
