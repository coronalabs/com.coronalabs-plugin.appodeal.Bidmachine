// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidMachineBidding
// swift-module-flags-ignorable: -enable-bare-slash-regex
import BidMachineApiCore
@_exported import BidMachineBidding
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct BiddingNetworkInfo {
  public var name: Swift.String
  public var params: BidMachineBidding.BiddingParams
  public var extras: BidMachineBidding.BiddingParams
  public static func info(_ name: Swift.String, _ builderBlock: BidMachineBidding.BiddingParamsBuilderBlock? = nil) -> BidMachineBidding.BiddingNetworkInfo
}
public struct BiddingNetwork {
  public let info: BidMachineBidding.BiddingNetworkInfo
}
public protocol DisplayAdExpirationMetricDelegate : AnyObject {
  func didTrackExpired(_ metric: BidMachineBidding.DisplayAdExpirationMetricProtocol)
}
extension BidMachineBidding.DisplayAdExpirationMetricDelegate {
  public func didTrackExpired(_ metric: BidMachineBidding.DisplayAdExpirationMetricProtocol)
}
public protocol DisplayAdExpirationMetricProtocol {
  init(_ info: BidMachineBidding.DisplayCreativeInfo, _ delegate: BidMachineBidding.DisplayAdExpirationMetricDelegate)
  func startExpiration()
  func invalidate()
}
public protocol BiddingAdapterNativeSourceRouterProtocol : AnyObject {
  func getAsset<T>(_ type: T.Type) -> BidMachineBidding.NativeAsset<T>? where T : BidMachineBidding.NativeAssetTypeProtocol
  func unregisterView()
}
public protocol BiddingAdapterSourceRouterProtocol : AnyObject {
  var nativeRouter: BidMachineBidding.BiddingAdapterNativeSourceRouterProtocol? { get }
  var videoStateRouter: BidMachineBidding.BiddingAdapterVideoStateRouter? { get }
  var eventStateRouter: BidMachineBidding.BiddingAdapterEventStateRouter? { get }
}
extension BidMachineBidding.BiddingAdapterSourceRouterProtocol {
  public var nativeRouter: BidMachineBidding.BiddingAdapterNativeSourceRouterProtocol? {
    get
  }
  public var videoStateRouter: BidMachineBidding.BiddingAdapterVideoStateRouter? {
    get
  }
  public var eventStateRouter: BidMachineBidding.BiddingAdapterEventStateRouter? {
    get
  }
}
public struct BiddingUnitInfo {
  public let name: Swift.String
  public let placement: BidMachineApiCore.Placement
  public let params: BidMachineBidding.BiddingParams
  public let extras: BidMachineBidding.BiddingParams
  public static func info(_ name: Swift.String, _ placement: BidMachineApiCore.Placement, _ builderBlock: BidMachineBidding.BiddingParamsBuilderBlock? = nil) -> BidMachineBidding.BiddingUnitInfo
}
public struct BiddingUnit {
  public let info: BidMachineBidding.BiddingUnitInfo
  public let price: Swift.Double
}
public typealias BiddingParams = [Swift.String : Any]
public typealias BiddingInfoParams = [Swift.String : Swift.String]
public typealias BiddingParamsBuilderBlock = (BidMachineBidding.BiddingParamsBuilderProtocol) -> Swift.Void
public protocol BiddingParamsBuilderProtocol {
  @discardableResult
  func withParams(_ params: BidMachineBidding.BiddingParams?) -> Self
  @discardableResult
  func withExtras(_ extras: BidMachineBidding.BiddingParams?) -> Self
}
public enum CreativeType {
  case unknown
  case display
  case video
  case native
  public static func == (a: BidMachineBidding.CreativeType, b: BidMachineBidding.CreativeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DisplayCreativeInfo {
  var id: Swift.String? { get }
  var biddingUnitId: Swift.String { get }
  var type: BidMachineBidding.CreativeType { get }
  var price: Swift.Double { get }
  var displayManager: Swift.String { get }
  var renderingInfo: [Swift.String : Any] { get }
  var customParams: [Swift.String : Any] { get }
  var visiblePercent: Swift.Double { get }
  var expirationTime: BidMachineApiCore.BidMachineTimeInterval { get }
}
public protocol DisplayAdViewabilityMetricDelegate : AnyObject {
  func didTrackViewability(_ metric: BidMachineBidding.DisplayAdViewabilityMetricProtocol)
  func didFinishViewability(_ metric: BidMachineBidding.DisplayAdViewabilityMetricProtocol)
}
extension BidMachineBidding.DisplayAdViewabilityMetricDelegate {
  public func didTrackViewability(_ metric: BidMachineBidding.DisplayAdViewabilityMetricProtocol)
  public func didFinishViewability(_ metric: BidMachineBidding.DisplayAdViewabilityMetricProtocol)
}
public protocol DisplayAdViewabilityMetricProtocol {
  init(_ info: BidMachineBidding.DisplayCreativeInfo, _ delegate: BidMachineBidding.DisplayAdViewabilityMetricDelegate)
  func startViewability(_ continer: UIKit.UIView, _ subviews: [UIKit.UIView])
  func invalidate()
}
public protocol BiddingAdapterDelegate : AnyObject {
  func didLoad(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func failToLoad(_ adapter: BidMachineBidding.BiddingAdapterProtocol, _ error: BidMachineApiCore.BidMachineError)
  func failToPresent(_ adapter: BidMachineBidding.BiddingAdapterProtocol, _ error: BidMachineApiCore.BidMachineError)
  func didPresent(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func didDismiss(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func willPresentScreen(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func didDismissScreen(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func didRecieveUserAction(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func didRecieveReward(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func didExpiredAdapter(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
  func didTrackImpression(_ adapter: BidMachineBidding.BiddingAdapterProtocol)
}
public protocol BiddingAdapterDataSource : AnyObject {
  var controller: UIKit.UIViewController? { get }
  var container: UIKit.UIView? { get }
}
public protocol BiddingAdapterProtocol : BidMachineBidding.BiddingAdapterSourceRouterProtocol {
  var dataSource: BidMachineBidding.BiddingAdapterDataSource? { get set }
  var delegate: BidMachineBidding.BiddingAdapterDelegate? { get set }
  func prepareContent() throws
  func present(on container: UIKit.UIView, with controller: UIKit.UIViewController) throws
  func present(on controller: UIKit.UIViewController) throws
  func invalidate()
}
extension BidMachineBidding.BiddingAdapterProtocol {
  public func notifyDelegate(_ block: (BidMachineBidding.BiddingAdapterProtocol, BidMachineBidding.BiddingAdapterDelegate) -> Swift.Void)
  public func present(on container: UIKit.UIView, with controller: UIKit.UIViewController) throws
  public func present(on controller: UIKit.UIViewController) throws
  public func invalidate()
}
public typealias BiddingAdapterProviderProtocolType = BidMachineBidding.BiddingAdapterProviderInfoProtocol & BidMachineBidding.BiddingAdapterProviderProtocol
public protocol BiddingAdapterProviderInfoDelegate : AnyObject {
  func didFailToCollectBiddingInfo(_ error: BidMachineApiCore.BidMachineError)
  func didCollectBiddingInfo(_ info: BidMachineBidding.BiddingInfoParams)
}
public protocol BiddingAdapterProviderInfoProtocol {
  var delegate: BidMachineBidding.BiddingAdapterProviderInfoDelegate? { get set }
  func collectBiddingInfo(_ environment: BidMachineApiCore.EnvironmentData)
}
public protocol BiddingAdapterProviderProtocol {
  func notifyMediationWin(_ price: Swift.Double, _ params: BidMachineBidding.BiddingParams)
  func notifyMediationLoss(_ price: Swift.Double, _ network: Swift.String, _ params: BidMachineBidding.BiddingParams)
  func displayAdapter(_ params: BidMachineBidding.BiddingParams) throws -> BidMachineBidding.BiddingAdapterProtocol
}
extension BidMachineBidding.BiddingAdapterProviderProtocol {
  public func notifyMediationWin(_ price: Swift.Double, _ params: BidMachineBidding.BiddingParams)
  public func notifyMediationLoss(_ price: Swift.Double, _ network: Swift.String, _ params: BidMachineBidding.BiddingParams)
}
public protocol NativeAssetProtocol {
  associatedtype T : BidMachineBidding.NativeAssetTypeProtocol
  var value: Self.T.ValueType? { get }
  var container: Self.T.ContainerType? { get }
  func updateContainer(_ container: Self.T.ContainerType?)
}
public class NativeAsset<T> : BidMachineBidding.NativeAssetProtocol where T : BidMachineBidding.NativeAssetTypeProtocol {
  public var value: T.ValueType? {
    get
  }
  weak public var container: T.ContainerType? {
    get
  }
  public func updateContainer(_ container: T.ContainerType?)
  public init(_ value: T.ValueType?)
  @objc deinit
}
public enum DisplayAdEventType {
  case loading
  case presenting
  case dismissing
  case screenPresenting
  case screenDismissing
  case action
  case reward
  case impression
  case click
  case container
  case expired
  case expiredAdapter
  public static func == (a: BidMachineBidding.DisplayAdEventType, b: BidMachineBidding.DisplayAdEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DisplayAdEvent {
  final public let type: BidMachineBidding.DisplayAdEventType
  @objc deinit
}
extension BidMachineBidding.DisplayAdEvent {
  final public var isTracked: Swift.Bool {
    get
  }
  final public var time: BidMachineApiCore.BidMachineTimeWall {
    get
  }
  final public var error: BidMachineApiCore.BidMachineError? {
    get
  }
}
extension BidMachineBidding.DisplayAdEvent {
  final public var description: Swift.String {
    get
  }
}
public protocol BiddingBidProtocol {
  var id: Swift.String { get }
  var version: Swift.String { get }
  var params: BidMachineBidding.BiddingInfoParams { get }
  var unit: BidMachineBidding.BiddingUnit { get }
  var adapterProvider: BidMachineBidding.BiddingAdapterProviderProtocol { get }
}
public protocol BiddingControllerProtocol : AnyObject {
  var price: Swift.Double { get set }
  var delegate: BidMachineBidding.BiddingControllerDelegate? { get set }
  func prepareBids(_ placement: BidMachineApiCore.Placement, _ environment: BidMachineApiCore.EnvironmentData, _ infos: [BidMachineBidding.BiddingUnitInfo]?)
  func invalidate()
}
public protocol BiddingControllerDelegate : AnyObject {
  func didPrepareBids(_ bids: [BidMachineBidding.BiddingBidProtocol])
  func didInvalidateBids(_ bids: [BidMachineBidding.BiddingBidProtocol])
  func didPrepareUnit(_ unitInfo: BidMachineBidding.BiddingUnitInfo, _ error: BidMachineApiCore.BidMachineError?)
  func didPrepareBid(_ bid: BidMachineBidding.BiddingBidProtocol, _ time: BidMachineApiCore.BidMachineTimeWall, _ error: BidMachineApiCore.BidMachineError?)
}
public protocol BiddingNetworkDelegate : AnyObject {
  func didInitialize()
  func didFailToInitialize(_ error: BidMachineApiCore.BidMachineError)
}
public protocol BiddingNetworkProtocol : AnyObject {
  static var adapterName: Swift.String { get }
  static var adapterVersion: Swift.String { get }
  static var networkVersion: Swift.String { get }
  var delegate: BidMachineBidding.BiddingNetworkDelegate? { get set }
  init()
  func adapterProvider(_ unit: BidMachineBidding.BiddingUnit) throws -> BidMachineBidding.BiddingAdapterProviderProtocolType
  func initializeNetwork(_ network: BidMachineBidding.BiddingNetwork, _ environment: BidMachineApiCore.EnvironmentData)
}
public protocol BiddingManagerDelegate : AnyObject {
  func didStartInitializeNetwork(_ network: BidMachineBidding.BiddingNetwork)
  func didCompleteInitializeNetwork(_ network: BidMachineBidding.BiddingNetwork, _ time: BidMachineApiCore.BidMachineTimeWall, _ error: BidMachineApiCore.BidMachineError?)
}
public class BiddingManager {
  public init()
  @objc deinit
}
extension BidMachineBidding.BiddingManager {
  public var delegate: BidMachineBidding.BiddingManagerDelegate? {
    get
    set
  }
  public func registerNetworksClasses(_ classes: [Swift.String])
  public func registerNetworks(_ infos: [BidMachineBidding.BiddingNetworkInfo]?)
  public func initializeNetworks(_ environment: BidMachineApiCore.EnvironmentData)
  public var definedNetworkClasses: [BidMachineBidding.BiddingNetworkProtocol.Type] {
    get
  }
}
extension BidMachineBidding.BiddingManager {
  public var biddingController: BidMachineBidding.BiddingControllerProtocol {
    get
  }
}
public protocol NativeAssetTypeProtocol {
  associatedtype ContainerType : UIKit.UIView
  associatedtype ValueType
}
@_hasMissingDesignatedInitializers public class TitleAssetType : BidMachineBidding.NativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UILabel
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CallToActionAssetType : BidMachineBidding.NativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UILabel
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DescriptionAssetType : BidMachineBidding.NativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UILabel
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IconAssetType : BidMachineBidding.NativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIImageView
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageAssetType : BidMachineBidding.NativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIView
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AdChoiceAssetType : BidMachineBidding.NativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIView
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VideoAssetType : BidMachineBidding.NativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIView
  public typealias ValueType = Swift.Bool
  @objc deinit
}
public protocol DisplayAdEventDelegate : AnyObject {
  func didReceiveEvent(_ event: BidMachineBidding.DisplayAdEvent)
}
public protocol DisplayAdProtocol {
  var id: Swift.String { get }
  var bid: BidMachineBidding.BiddingBidProtocol { get }
  var creativeInfo: BidMachineBidding.DisplayCreativeInfo { get }
  var eventDelegate: BidMachineBidding.DisplayAdEventDelegate? { get set }
  var router: BidMachineBidding.DisplayAdAdapterSourceRouterProtocol { get }
  func load() throws
  func present() throws
  func invalidate()
  func registerViewabilityMetric(_ metric: BidMachineBidding.DisplayAdViewabilityMetricProtocol.Type)
  func registerExpirationMetric(_ metric: BidMachineBidding.DisplayAdExpirationMetricProtocol.Type)
}
@_hasMissingDesignatedInitializers public class DisplayProvider {
  @objc deinit
}
extension BidMachineBidding.DisplayProvider {
  public static func displayAd(_ bids: [BidMachineBidding.BiddingBidProtocol], _ creativeInfo: BidMachineBidding.DisplayCreativeInfo) throws -> BidMachineBidding.DisplayAdProtocol
}
public protocol BiddingAdapterVideoStateRouter {
  func stopPlayVideo()
  func startPlayVideo()
  func muteVideo()
  func unmuteVideo()
}
public protocol BiddingAdapterEventStateRouter {
  func trackContainerAdded()
  func trackClick()
  func trackImpression()
}
extension BidMachineBidding.BiddingAdapterEventStateRouter {
  public func trackContainerAdded()
  public func trackClick()
  public func trackImpression()
}
public protocol DisplayAdAdapterSourceRouterProtocol : BidMachineBidding.BiddingAdapterSourceRouterProtocol {
  func updateController(_ controller: UIKit.UIViewController?)
  func updateContainer(_ container: UIKit.UIView?)
}
public struct BidMachineAdapter {
  public static var adapterVersionPath: Swift.String {
    get
  }
}
extension BidMachineBidding.CreativeType : Swift.Equatable {}
extension BidMachineBidding.CreativeType : Swift.Hashable {}
extension BidMachineBidding.DisplayAdEventType : Swift.Equatable {}
extension BidMachineBidding.DisplayAdEventType : Swift.Hashable {}
