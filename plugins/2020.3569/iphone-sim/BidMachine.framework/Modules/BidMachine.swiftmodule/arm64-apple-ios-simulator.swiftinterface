// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BidMachine
import AVFoundation
import AVKit
import CoreLocation
import CoreTelephony
import CryptoKit
import Dispatch
import Foundation
import OMSDK_Appodeal
import SQLite3
import StackModules.STKConstants
import StackModules
import StackProductPresentation
import StackRendering
import Swift
import UIKit.UIApplication
import UIKit.UIImage
import UIKit
import UIKit.UIScreen
import UIKit.UIView
import WebKit.WKWebView
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import libxml2
import os.log
import os
@objc public protocol BidMachineAdProtocol {
  @objc var rendererConfiguration: BidMachine.BidMachineRendererConfiguration { get }
  @objc var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol { get }
  @objc @available(*, deprecated, message: "Use `auctionRequest` instead.")
  var requestInfo: any BidMachine.BidMachineRequestInfoProtocol { get }
  @objc var auctionRequest: BidMachine.BidMachineAuctionRequest { get }
  @objc var controller: UIKit.UIViewController? { get set }
  @objc var delegate: (any BidMachine.BidMachineAdDelegate)? { get set }
  @objc var canShow: Swift.Bool { get }
  @objc func loadAd()
}
@objc public protocol BidMachineAdDelegate {
  @objc func didLoadAd(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc func didFailLoadAd(_ ad: any BidMachine.BidMachineAdProtocol, _ error: any Swift.Error)
  @objc optional func didPresentAd(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didFailPresentAd(_ ad: any BidMachine.BidMachineAdProtocol, _ error: any Swift.Error)
  @objc optional func didDismissAd(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func willPresentScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didDismissScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didPresentPartialScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didDismissPartialScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didUserInteraction(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didExpired(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didTrackImpression(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didTrackInteraction(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didReceiveReward(_ ad: any BidMachine.BidMachineAdProtocol)
}
@objc public protocol BidMachineNativeAdRendering {
  @objc var titleLabel: UIKit.UILabel? { get }
  @objc var callToActionLabel: UIKit.UILabel? { get }
  @objc var descriptionLabel: UIKit.UILabel? { get }
  @objc var iconView: UIKit.UIImageView? { get }
  @objc var mediaContainerView: UIKit.UIView? { get }
  @objc var adChoiceView: UIKit.UIView? { get }
}
@objc public enum BidMachineNativeAdRenderingAssetType : Swift.Int, Swift.CaseIterable {
  case titleLabel
  case callToActionLabel
  case descriptionLabel
  case iconView
  case mediaContainerView
  case adChoiceView
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BidMachine.BidMachineNativeAdRenderingAssetType]
  public typealias RawValue = Swift.Int
  public static var allCases: [BidMachine.BidMachineNativeAdRenderingAssetType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class BidMachineBanner : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToSuperview()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc final public var rendererConfiguration: BidMachine.BidMachineRendererConfiguration {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var auctionRequest: BidMachine.BidMachineAuctionRequest {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
}
@objc extension BidMachine.BidMachineBanner : BidMachine.BidMachineAdProtocol {
  @_Concurrency.MainActor(unsafe) @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc final public func loadAd()
}
@_hasMissingDesignatedInitializers @objc final public class BidMachineInterstitial : ObjectiveC.NSObject {
  @objc deinit
  @objc final public var rendererConfiguration: BidMachine.BidMachineRendererConfiguration {
    @objc get
  }
  @objc final public var auctionRequest: BidMachine.BidMachineAuctionRequest {
    @objc get
  }
  @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
}
@objc extension BidMachine.BidMachineInterstitial : BidMachine.BidMachineAdProtocol {
  @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc final public func loadAd()
  @objc final public func presentAd()
}
@_hasMissingDesignatedInitializers @objc final public class BidMachineNative : ObjectiveC.NSObject {
  @objc deinit
  @objc final public var rendererConfiguration: BidMachine.BidMachineRendererConfiguration {
    @objc get
  }
  @objc final public var auctionRequest: BidMachine.BidMachineAuctionRequest {
    @objc get
  }
  @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
}
@objc extension BidMachine.BidMachineNative : BidMachine.BidMachineAdProtocol {
  @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc final public func loadAd()
  @objc final public func presentAd(_ container: UIKit.UIView, _ renderingAd: any BidMachine.BidMachineNativeAdRendering) throws
  @objc final public func registerDefaultAssetsForInteraction()
  @objc final public func registerAssetsForInteraction(_ assets: [BidMachine.BidMachineNativeAdRenderingAssetType.RawValue])
  @objc final public func unregisterView()
}
@objc extension BidMachine.BidMachineNative {
  @objc final public var title: Swift.String? {
    @objc get
  }
  @objc final public var body: Swift.String? {
    @objc get
  }
  @objc final public var cta: Swift.String? {
    @objc get
  }
  @objc final public var icon: Swift.String? {
    @objc get
  }
  @objc final public var main: Swift.String? {
    @objc get
  }
  @objc final public var isVideo: Swift.Bool {
    @objc get
  }
  @objc final public func trackContainerAdded()
  @objc final public func trackImpression()
  @objc final public func trackClick()
}
@_hasMissingDesignatedInitializers @objc final public class BidMachineRewarded : ObjectiveC.NSObject {
  @objc deinit
  @objc final public var rendererConfiguration: BidMachine.BidMachineRendererConfiguration {
    @objc get
  }
  @objc final public var auctionRequest: BidMachine.BidMachineAuctionRequest {
    @objc get
  }
  @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
}
@objc extension BidMachine.BidMachineRewarded : BidMachine.BidMachineAdProtocol {
  @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc final public func loadAd()
  @objc final public func presentAd()
}
public struct ApiDefines {
  public static let version: Swift.String
  public static let sdkName: Swift.String
  public static let partnerName: Swift.String
  public static let partnerVersion: Swift.String
}
public typealias BidMachineAuctionRequestBuilderBlock = (any BidMachine.BidMachineAuctionRequestBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineAuctionRequestBuilderProtocol {
  @objc @discardableResult
  func withPayload(_ payload: Swift.String) -> Self
  @objc @discardableResult
  func withUnitConfigurations(_ configurations: [BidMachine.BidMachineBiddingUnitConfiguration]) -> Self
  @objc @discardableResult
  func appendPriceFloor(_ price: Swift.Double, _ name: Swift.String) -> Self
}
@_hasMissingDesignatedInitializers @objc final public class BidMachineAuctionRequest : ObjectiveC.NSObject {
  final public var payload: Swift.String? {
    get
  }
  final public var priceFloors: [any BidMachine.BidMachinePriceFloorProtocol] {
    get
  }
  final public var unitsConfigurations: [BidMachine.BidMachineBiddingUnitConfiguration] {
    get
  }
  final public let placement: BidMachine.BidMachinePlacement
  @objc deinit
}
@objc public protocol BidMachineAuctionResponseProtocol {
  @objc var bidId: Swift.String { get }
  @objc var creativeId: Swift.String? { get }
  @objc var dealId: Swift.String? { get }
  @objc var cId: Swift.String? { get }
  @objc var demandSource: Swift.String { get }
  @objc var price: Swift.Double { get }
  @objc var customParams: [Swift.String : Any] { get }
  @objc var customExtras: [Swift.String : Any] { get }
}
@objc public protocol BidMachinePriceFloorProtocol {
  @objc var price: Swift.Double { get }
  @objc var name: Swift.String { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class BidMachineRendererConfiguration : ObjectiveC.NSObject {
  @objc final public var extras: [Swift.String : Any]
  @objc deinit
}
public typealias BidMachineBiddingAdapterProviderType = BidMachine.BidMachineBiddingAdapterProviderProtocol & BidMachine.BidMachineBiddingInfoProviderProtocol
@available(*, deprecated, renamed: "BidMachineBiddingUnitConfiguration", message: "Will be remove")
public typealias BidMachineUnitConfiguration = BidMachine.BidMachineBiddingUnitConfiguration
@available(*, deprecated, renamed: "BidMachineBiddingNetworkConfiguraton", message: "Will be remove")
public typealias BidMachineNetworkConfiguraton = BidMachine.BidMachineBiddingNetworkConfiguraton
public protocol BidMachineBiddingNetworkDelegate : AnyObject {
  func didInitialize()
  func didFailToInitialize(_ error: BidMachine.BidMachineError)
}
public protocol BidMachineBiddingNetworkProtocol : AnyObject {
  var adapterName: Swift.String { get }
  var adapterVersion: Swift.String { get }
  var networkVersion: Swift.String { get }
  var delegate: (any BidMachine.BidMachineBiddingNetworkDelegate)? { get set }
  init()
  func adapterProvider(_ unit: BidMachine.BidMachineModel.BiddingUnitConfiguration) throws -> any BidMachine.BidMachineBiddingAdapterProviderProtocol & BidMachine.BidMachineBiddingInfoProviderProtocol
  func initializeNetwork(_ network: BidMachine.BidMachineModel.BiddingNetworkConfiguration, _ environment: any BidMachine.EnvironmentData)
}
public protocol BidMachineBiddingInfoProviderDelegate : AnyObject {
  func didFailToCollectBiddingInfo(_ error: BidMachine.BidMachineError)
  func didCollectBiddingInfo(_ info: BidMachine.BidMachineExtras)
}
public protocol BidMachineBiddingInfoProviderProtocol {
  var delegate: (any BidMachine.BidMachineBiddingInfoProviderDelegate)? { get set }
  func collectBiddingInfo(_ environment: any BidMachine.EnvironmentData)
}
public protocol BidMachineBiddingAdapterProviderProtocol {
  func notifyMediationWin(_ price: Swift.Double)
  func notifyMediationLoss(_ price: Swift.Double, _ network: Swift.String)
  func displayAdapter(_ creative: BidMachine.BidMachineModel.AuctionCreative) throws -> any BidMachine.BidMachineBiddingAdapterProtocol
}
extension BidMachine.BidMachineBiddingAdapterProviderProtocol {
  public func notifyMediationWin(_ price: Swift.Double)
  public func notifyMediationLoss(_ price: Swift.Double, _ network: Swift.String)
}
public protocol BidMachineBiddingAdapterDataSource : AnyObject {
  var controller: UIKit.UIViewController? { get }
  var container: UIKit.UIView? { get }
}
public protocol BidMachineBiddingAdapterDelegate : AnyObject {
  func didLoad(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol, _ error: BidMachine.BidMachineError?)
  func didPresent(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol, _ error: BidMachine.BidMachineError?)
  func didDismiss(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol)
  func willPresentScreen(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol, _ error: BidMachine.BidMachineError?)
  func didDismissScreen(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol)
  func didRecieveUserAction(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol)
  func didRecieveReward(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol)
  func didExpiredAdapter(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol, _ error: BidMachine.BidMachineError)
  func didTrackImpression(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol, _ error: BidMachine.BidMachineError?)
  func didPresentPartialScreen(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol, _ error: BidMachine.BidMachineError?)
  func didDismissPartialScreen(_ adapter: any BidMachine.BidMachineBiddingAdapterProtocol)
}
public protocol BidMachineBiddingAdapterProtocol : BidMachine.BidMachineBiddingAdapterSourceRouterProtocol {
  var dataSource: (any BidMachine.BidMachineBiddingAdapterDataSource)? { get set }
  var delegate: (any BidMachine.BidMachineBiddingAdapterDelegate)? { get set }
  func prepareContent() throws
  func present(on container: UIKit.UIView, with controller: UIKit.UIViewController, configuration: BidMachine.BidMachineModel.RendererConfiguration) throws
  func present(on controller: UIKit.UIViewController, configuration: BidMachine.BidMachineModel.RendererConfiguration) throws
  func invalidate()
}
extension BidMachine.BidMachineBiddingAdapterProtocol {
  public func notifyDelegate(_ block: (any BidMachine.BidMachineBiddingAdapterProtocol, any BidMachine.BidMachineBiddingAdapterDelegate) -> Swift.Void)
  public func present(on container: UIKit.UIView, with controller: UIKit.UIViewController, configuration: BidMachine.BidMachineModel.RendererConfiguration) throws
  public func present(on controller: UIKit.UIViewController, configuration: BidMachine.BidMachineModel.RendererConfiguration) throws
  public func invalidate()
}
public protocol BidMachineBiddingAdapterNativeAssetTypeProtocol {
  associatedtype ContainerType : UIKit.UIView
  associatedtype ValueType
}
public protocol BidMachineBiddingAdapterNativeAssetProtocol {
  associatedtype T : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol
  var value: Self.T.ValueType? { get }
  var container: Self.T.ContainerType? { get }
  func updateContainer(_ container: Self.T.ContainerType?)
}
final public class BidMachineBiddingAdapterNativeAsset<T> : BidMachine.BidMachineBiddingAdapterNativeAssetProtocol where T : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  final public var isUserInteractionEnabled: Swift.Bool
  final public var value: T.ValueType? {
    get
  }
  weak final public var container: T.ContainerType? {
    get
  }
  final public func updateContainer(_ container: T.ContainerType?)
  public init(_ value: T.ValueType?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BidMachineBiddingAdapterNativeAssetTitle : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UILabel
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BidMachineBiddingAdapterNativeAssetCallToAction : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UILabel
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BidMachineBiddingAdapterNativeAssetDescription : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UILabel
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BidMachineBiddingAdapterNativeAssetIcon : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIImageView
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BidMachineBiddingAdapterNativeAssetImage : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIView
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BidMachineBiddingAdapterNativeAssetAdChoice : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIView
  public typealias ValueType = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BidMachineBiddingAdapterNativeAssetVideo : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol {
  public typealias ContainerType = UIKit.UIView
  public typealias ValueType = Swift.Bool
  @objc deinit
}
public protocol BidMachineBiddingAdapterSourceRouterDataProtocol {
  func getExtrasData() -> [Swift.String : Any]
}
public protocol BidMachineBiddingAdapterSourceRouterVideoProtocol {
  func stopPlayVideo()
  func startPlayVideo()
  func muteVideo()
  func unmuteVideo()
}
public protocol BidMachineBiddingAdapterSourceRouterEventProtocol {
  func trackContainerAdded()
  func trackClick()
  func trackImpression()
}
public protocol BidMachineBiddingAdapterSourceRouterNativeProtocol : AnyObject {
  func getAsset<T>(_ type: T.Type) -> BidMachine.BidMachineBiddingAdapterNativeAsset<T>? where T : BidMachine.BidMachineBiddingAdapterNativeAssetTypeProtocol
  func unregisterView()
}
public protocol BidMachineBiddingAdapterSourceRouterProtocol : AnyObject {
  var dataRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterDataProtocol)? { get }
  var nativeRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterNativeProtocol)? { get }
  var videoStateRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterVideoProtocol)? { get }
  var eventStateRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterEventProtocol)? { get }
}
extension BidMachine.BidMachineBiddingAdapterSourceRouterProtocol {
  public var dataRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterDataProtocol)? {
    get
  }
  public var nativeRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterNativeProtocol)? {
    get
  }
  public var videoStateRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterVideoProtocol)? {
    get
  }
  public var eventStateRouter: (any BidMachine.BidMachineBiddingAdapterSourceRouterEventProtocol)? {
    get
  }
}
extension BidMachine.BidMachineBiddingAdapterSourceRouterEventProtocol {
  public func trackContainerAdded()
  public func trackClick()
  public func trackImpression()
}
@objc final public class BidMachineBiddingNetworkConfiguraton : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let params: [Swift.String : Any]?
  @objc final public let extras: [Swift.String : Any]?
  @objc(initWithName:params:extras:) public init(_ name: Swift.String, _ params: [Swift.String : Any]?, _ extras: [Swift.String : Any]?)
  @objc deinit
}
@objc final public class BidMachineBiddingUnitConfiguration : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let format: BidMachine.PlacementFormat
  @objc final public let params: [Swift.String : Any]?
  @objc final public let extras: [Swift.String : Any]?
  @objc(initWithName:format:params:extras:) public init(_ name: Swift.String, _ format: BidMachine.PlacementFormat, _ params: [Swift.String : Any]? = nil, _ extras: [Swift.String : Any]? = nil)
  @objc deinit
}
public typealias BidMachineBiddingInfoBuilderBlock = (any BidMachine.BidMachineBiddingInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineBiddingInfoBuilderProtocol {
  @objc @discardableResult
  func withTestMode(_ test: Swift.Bool) -> Self
  @objc @discardableResult
  func withLoggingMode(_ logging: Swift.Bool) -> Self
}
@objc public protocol BidMachineBiddingInfoProtocol {
  @objc var isTestMode: Swift.Bool { get }
  @objc var isLoggingMode: Swift.Bool { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineBiddingInfoBuilderProtocol) -> Swift.Void)
}
public typealias BidMachinePublisherInfoBuilderBlock = (any BidMachine.BidMachinePublisherInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachinePublisherInfoBuilderProtocol {
  @objc @discardableResult
  func withId(_ id: Swift.String) -> Self
  @objc @discardableResult
  func withName(_ name: Swift.String) -> Self
  @objc @discardableResult
  func withDomain(_ domain: Swift.String) -> Self
  @objc @discardableResult
  func withCategories(_ cat: [Swift.String]) -> Self
}
@objc public protocol BidMachinePublisherInfoProtocol {
  @objc var ID: Swift.String? { get }
  @objc var name: Swift.String? { get }
  @objc var domain: Swift.String? { get }
  @objc var categories: [Swift.String] { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachinePublisherInfoBuilderProtocol) -> Swift.Void)
}
public typealias BidMachineRegulationInfoBuilderBlock = (any BidMachine.BidMachineRegulationInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineRegulationInfoBuilderProtocol {
  @objc @discardableResult
  func withCOPPA(_ coppa: Swift.Bool) -> Self
  @objc @discardableResult
  func withGDPRZone(_ gdpr: Swift.Bool) -> Self
  @objc @discardableResult
  func withGDPRConsent(_ consent: Swift.Bool) -> Self
  @objc @discardableResult
  func withGDPRConsentString(_ consent: Swift.String) -> Self
  @objc @discardableResult
  func withUSPrivacyString(_ privacy: Swift.String) -> Self
  @objc @discardableResult
  func withGPP(_ gpp: Swift.String, _ sid: [Swift.UInt32]) -> Self
}
@objc public protocol BidMachineRegulationZoneProtocol {
  @objc var isZone: Swift.Bool { get }
  @objc var isConsent: Swift.Bool { get }
  @objc var zoneValue: Swift.String? { get }
}
@objc public protocol BidMachineRegulationGPPProtocol {
  @objc var gpp: Swift.String? { get }
  @objc var sid: [Swift.UInt32]? { get }
}
@objc public protocol BidMachineRegulationInfoProtocol {
  @objc var COPPA: Swift.Bool { get }
  @objc var GPPZone: any BidMachine.BidMachineRegulationGPPProtocol { get }
  @objc var CCPAZone: any BidMachine.BidMachineRegulationZoneProtocol { get }
  @objc var GDPRZone: any BidMachine.BidMachineRegulationZoneProtocol { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineRegulationInfoBuilderProtocol) -> Swift.Void)
}
public typealias BidMachineInfoBuilderBlock = (any BidMachine.BidMachineInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineInfoBuilderProtocol {
  @objc @discardableResult
  func withTestMode(_ test: Swift.Bool) -> Self
  @objc @discardableResult
  func withLoggingMode(_ logging: Swift.Bool) -> Self
  @objc @discardableResult
  func withBidLoggingMode(_ logging: Swift.Bool) -> Self
  @objc @discardableResult
  func withEventLoggingMode(_ logging: Swift.Bool) -> Self
  @objc @discardableResult
  func withSanitizerLoggingMode(_ logging: Swift.Bool) -> Self
  @objc @discardableResult
  func withSSP(_ ssp: Swift.String) -> Self
}
@objc public protocol BidMachineInfoProtocol {
  @objc var isInitialized: Swift.Bool { get }
  @objc var publisherInfo: any BidMachine.BidMachinePublisherInfoProtocol { get }
  @objc var targetingInfo: any BidMachine.BidMachineTargetingInfoProtocol { get }
  @objc var regulationInfo: any BidMachine.BidMachineRegulationInfoProtocol { get }
  @objc var biddingInfo: any BidMachine.BidMachineBiddingInfoProtocol { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineInfoBuilderProtocol) -> Swift.Void)
}
public typealias BidMachineTargetingInfoBuilderBlock = (any BidMachine.BidMachineTargetingInfoBuilderProtocol) -> Swift.Void
@objc(BidMachineUserGender) public enum UserGender : Swift.Int {
  case unknown = 0
  case male = 1
  case female = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(BidMachineFrameworkName) public enum FrameworkName : Swift.Int {
  case unknown = 0
  case native = 1
  case unity = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol BidMachineTargetingInfoBuilderProtocol {
  @objc @discardableResult
  func withUserId(_ id: Swift.String) -> Self
  @objc @discardableResult
  func withUserGender(_ gender: BidMachine.UserGender) -> Self
  @objc @discardableResult
  func withUserYOB(_ yob: Swift.UInt32) -> Self
  @objc @discardableResult
  func withUserLocation(_ location: CoreLocation.CLLocation) -> Self
  @objc @discardableResult
  func withCountry(_ country: Swift.String) -> Self
  @objc @discardableResult
  func withCity(_ city: Swift.String) -> Self
  @objc @discardableResult
  func withZip(_ zip: Swift.String) -> Self
  @objc @discardableResult
  func withKeywords(_ keywords: Swift.String) -> Self
  @objc @discardableResult
  func withBlockedApps(_ bapp: [Swift.String]) -> Self
  @objc @discardableResult
  func withBlockedCategories(_ bcat: [Swift.String]) -> Self
  @objc @discardableResult
  func withBlockedAdvertisers(_ badv: [Swift.String]) -> Self
  @objc @discardableResult
  func withStoreURL(_ url: Swift.String) -> Self
  @objc @discardableResult
  func withStoreId(_ id: Swift.String) -> Self
  @objc @discardableResult
  func withStoreCategory(_ cat: Swift.String) -> Self
  @objc @discardableResult
  func withStoreSubCategories(_ subcat: [Swift.String]) -> Self
  @objc @discardableResult
  func withPaid(_ paid: Swift.Bool) -> Self
  @objc @discardableResult
  func withFrameworkName(_ name: BidMachine.FrameworkName) -> Self
  @objc @discardableResult
  func appendExternalId(_ sourceId: Swift.String, _ sourceValue: Swift.String) -> Self
}
@objc public protocol BidMachineTargetingInfoProtocol {
  @objc var userId: Swift.String? { get }
  @objc var userGender: BidMachine.UserGender { get }
  @objc var userYOB: Swift.UInt32 { get }
  @objc var userLocation: CoreLocation.CLLocation? { get }
  @objc var country: Swift.String? { get }
  @objc var city: Swift.String? { get }
  @objc var zip: Swift.String? { get }
  @objc var keywords: Swift.String? { get }
  @objc var blockedApps: [Swift.String] { get }
  @objc var blockedCategories: [Swift.String] { get }
  @objc var blockedAdvertisers: [Swift.String] { get }
  @objc var storeURL: Swift.String? { get }
  @objc var storeId: Swift.String? { get }
  @objc var storeCategory: Swift.String? { get }
  @objc var storeSubCategories: [Swift.String] { get }
  @objc var paid: Swift.Bool { get }
  @objc var frameworkName: BidMachine.FrameworkName { get }
  @objc var externalIds: [Swift.String : Swift.String] { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineTargetingInfoBuilderProtocol) -> Swift.Void)
}
public protocol AuctionEnvironment {
  var domainSpec: Swift.String { get }
  var domainVersion: Swift.String { get }
  var protocolVersion: Swift.String { get }
  var currency: BidMachine.Currency { get }
  var type: BidMachine.AuctionType { get }
  var tmax: BidMachine.BidMachineTimeInterval { get }
}
public protocol BiddingEnvironment {
  var isTestMode: Swift.Bool { get }
  var isLoggingMode: Swift.Bool { get }
  var omid: any BidMachine.BidMachineEnvironmentOMID { get }
}
public protocol EnvironmentData {
  var sdk: any BidMachine.SdkEnvironment { get }
  var session: any BidMachine.SessionEnvironment { get }
  var publisher: any BidMachine.PublisherEnvironment { get }
  var targeting: any BidMachine.TargetingEnvironment { get }
  var regulation: any BidMachine.RegulationEnvironment { get }
  var device: any BidMachine.DeviceEnvironment { get }
  var auction: any BidMachine.AuctionEnvironment { get }
  var bidding: any BidMachine.BiddingEnvironment { get }
}
public protocol DeviceEnvironment {
  var appBundle: Swift.String { get }
  var appVersion: Swift.String { get }
  var appName: Swift.String { get }
  var deviceName: Swift.String { get }
  var retentionCount: Swift.UInt32 { get }
  var appInstallTime: BidMachine.BidMachineTimeInterval { get }
  var appFirstLaunchTime: BidMachine.BidMachineTimeInterval { get }
  var IFA: Swift.String { get }
  var IFV: Swift.String { get }
  var BMIFV: Swift.String { get }
  var atts: Swift.UInt32 { get }
  var debug: Swift.Bool { get }
  var secure: Swift.Bool { get }
  var type: BidMachine.DeviceType { get }
  var userAgent: Swift.String { get }
  var limitAdTracking: Swift.Bool { get }
  var connectionType: BidMachine.ConnectionType { get }
  var mccmnc: Swift.String { get }
  var carrier: Swift.String { get }
  var width: Swift.UInt32 { get }
  var height: Swift.UInt32 { get }
  var ppi: Swift.UInt32 { get }
  var pxratio: Swift.Float { get }
  var os: BidMachine.OsType { get }
  var osv: Swift.String { get }
  var osExecutionEnvironment: BidMachine.OSExecutionEnvironment { get }
  var miniOSVersion: Swift.String? { get }
  var hwv: Swift.String { get }
  var make: Swift.String { get }
  var model: Swift.String { get }
  var language: Swift.String { get }
  var deviceLocation: CoreLocation.CLLocation? { get }
  var utc: Swift.Int32 { get }
  var diskSpace: Swift.UInt64 { get }
  var totalDisk: Swift.UInt64 { get }
  var totalMem: Swift.UInt64 { get }
  var freeMem: Swift.UInt64 { get }
  var charging: Swift.Bool { get }
  var headset: Swift.Bool { get }
  var headsetName: Swift.String { get }
  var batteryLevel: Swift.Float { get }
  var batterySaver: Swift.Bool { get }
  var darkMode: Swift.Bool { get }
  var time: Foundation.TimeInterval { get }
  var timezone: Swift.String { get }
  var screenBright: Swift.Float { get }
  var jailBreak: Swift.Bool { get }
  var lastBootup: Foundation.TimeInterval { get }
  var volumeLevel: Swift.Float { get }
  var accessability: Swift.String { get }
  var registeredSKNetworks: [Swift.String] { get }
  var registeredAAKNetworks: [Swift.String] { get }
  var attributionReportingUrl: Swift.String { get }
  var releaseType: Swift.String { get }
  var isProxy: Swift.Bool { get }
  var isVPN: Swift.Bool { get }
  var isOtherAudioPlaying: Swift.Bool { get }
}
public protocol BidMachineEnvironmentOMID {
  var partnerName: Swift.String { get }
  var partnerVersion: Swift.String { get }
  var omJsScript: Swift.String { get }
}
public protocol PublisherEnvironment {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var domain: Swift.String { get }
  var categories: [Swift.String] { get }
}
public protocol RegulationEnvironment {
  var COPPA: Swift.Bool { get }
  var GPPZone: any BidMachine.RegulationGPPEnvironment { get }
  var CCPAZone: any BidMachine.RequlationZoneEnvironment { get }
  var GDPRZone: any BidMachine.RequlationZoneEnvironment { get }
}
extension BidMachine.RegulationEnvironment {
  public var coppaRestricted: Swift.Bool {
    get
  }
  public var gdprRestricted: Swift.Bool {
    get
  }
}
public protocol RegulationGPPEnvironment {
  var gpp: Swift.String? { get }
  var sid: [Swift.UInt32]? { get }
}
public protocol RequlationZoneEnvironment {
  var isZone: Swift.Bool { get }
  var isConsent: Swift.Bool { get }
  var value: Swift.String? { get }
}
public protocol SdkEnvironment {
  var version: Swift.String { get }
  var name: Swift.String { get }
  var SSP: Swift.String { get }
  var sourceId: Swift.String { get }
  var isTestMode: Swift.Bool { get }
}
public protocol SessionEnvironment {
  var id: Swift.String { get }
  var duration: BidMachine.BidMachineTimeInterval { get }
  var sessionCount: Swift.UInt32 { get }
  var lastSessionDuration: Swift.Int64? { get }
}
public protocol TargetingEnvironment {
  var userId: Swift.String { get }
  var userGender: BidMachine.Gender { get }
  var userYOB: Swift.UInt32 { get }
  var keywords: Swift.String { get }
  var country: Swift.String { get }
  var city: Swift.String { get }
  var zip: Swift.String { get }
  var userLocation: CoreLocation.CLLocation? { get }
  var blockedApps: [Swift.String] { get }
  var blockedCategories: [Swift.String] { get }
  var blockedAdvertisers: [Swift.String] { get }
  var storeURL: Swift.String { get }
  var storeId: Swift.String { get }
  var storeCategory: Swift.String { get }
  var storeSubCategories: [Swift.String] { get }
  var paid: Swift.Bool { get }
  var frameworkName: Swift.String { get }
  var externalIds: [Swift.String : Swift.String] { get }
}
public enum Gender : Swift.String {
  case unknown
  case male
  case female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Currency : Swift.String {
  case unknown
  case USD
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceType {
  case unknown
  case phone
  case tablete
  public static func == (a: BidMachine.DeviceType, b: BidMachine.DeviceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuctionType {
  case unknown
  case first
  case second
  public static func == (a: BidMachine.AuctionType, b: BidMachine.AuctionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConnectionType {
  case unknown
  case wifi
  case cellularUnknown
  case cellular2G
  case cellular3G
  case cellular4G
  case cellular5G
  public static func == (a: BidMachine.ConnectionType, b: BidMachine.ConnectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OsType {
  case unknown
  case ios
  public static func == (a: BidMachine.OsType, b: BidMachine.OsType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OSExecutionEnvironment : Swift.Int {
  case unknown
  case macCatalyst
  case maciOS
  case nativeiOS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LocationType {
  case unknown
  case user
  case gps
  public static func == (a: BidMachine.LocationType, b: BidMachine.LocationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias BidMachinePlacementBuilderBlock = (any BidMachine.BidMachinePlacementBuilderProtocol) -> Swift.Void
@objc public protocol BidMachinePlacementBuilderProtocol {
  @objc @discardableResult
  func withPlacementId(_ placementId: Swift.String) -> Self
  @objc @discardableResult
  func withCustomParameters(_ params: [Swift.String : Any]) -> Self
}
@_hasMissingDesignatedInitializers @objc final public class BidMachinePlacement : ObjectiveC.NSObject {
  @objc final public var format: BidMachine.PlacementFormat {
    get
  }
  @objc final public var placementId: Swift.String? {
    get
  }
  @objc final public var customParameters: [Swift.String : Any] {
    get
  }
  final public let type: BidMachine.PlacementType
  @objc deinit
}
@objc(BidMachinePlacementFormat) public enum PlacementFormat : Swift.Int {
  case unknown
  case banner
  case banner320x50
  case banner728x90
  case banner300x250
  case interstitial
  case interstitialVideo
  case interstitialStatic
  case rewarded
  case rewardedVideo
  case rewardedStatic
  case native
  case nativeIcon
  case nativeImage
  case nativeVideo
  case nativeIconAndVideo
  case nativeIconAndImage
  case nativeImageAndVideo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BidMachine.PlacementFormat {
  public func placementType() -> BidMachine.PlacementType?
  public var name: Swift.String {
    get
  }
}
extension Foundation.NSString {
  public func placementFormat() -> BidMachine.PlacementFormat
}
public protocol PlacementTraits {
  var isVideo: Swift.Bool { get }
  var isStatic: Swift.Bool { get }
  var isInterstitial: Swift.Bool { get }
  var isBanner: Swift.Bool { get }
  var isRewarded: Swift.Bool { get }
  var isNative: Swift.Bool { get }
  var size: CoreFoundation.CGSize { get }
}
public enum PlacementType : Swift.Hashable {
  case banner(_: Swift.UInt32)
  case native(_: Swift.Bool, _: Swift.Bool, _: Swift.Bool)
  case rewarded(_: Swift.Bool, _: Swift.Bool)
  case interstitial(_: Swift.Bool, _: Swift.Bool)
  public static func == (lhs: BidMachine.PlacementType, rhs: BidMachine.PlacementType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BidMachine.PlacementType {
  public var name: Swift.String {
    get
  }
  public var format: BidMachine.PlacementFormat {
    get
  }
}
extension BidMachine.PlacementType : BidMachine.PlacementTraits {
  public var isVideo: Swift.Bool {
    get
  }
  public var isStatic: Swift.Bool {
    get
  }
  public var isInterstitial: Swift.Bool {
    get
  }
  public var isBanner: Swift.Bool {
    get
  }
  public var isRewarded: Swift.Bool {
    get
  }
  public var isNative: Swift.Bool {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class BidMachineSdk : ObjectiveC.NSObject {
  @objc public static let shared: BidMachine.BidMachineSdk
  @objc public static let sdkVersion: Swift.String
  @objc public static let sdkName: Swift.String
  @objc public static let partnerName: Swift.String
  @objc public static let partnerVersion: Swift.String
  @objc deinit
}
@objc extension BidMachine.BidMachineSdk {
  @objc final public func initializeSdk(_ sourceId: Swift.String)
  @objc @available(*, deprecated, message: "Use `token(placement:completion:)` instead.")
  final public func token(with format: BidMachine.PlacementFormat, completion: @escaping (Swift.String?) -> Swift.Void)
  @objc final public func token(placement: BidMachine.BidMachinePlacement, completion: @escaping (Swift.String?) -> Swift.Void)
}
@objc extension BidMachine.BidMachineSdk {
  @objc final public func extrasValue(by key: Swift.String) -> Any?
}
extension BidMachine.BidMachineSdk {
  final public func installFeature(_ name: Swift.String, _ value: Any?)
}
extension BidMachine.BidMachineSdk : BidMachine.BidMachineInfoProtocol {
  @objc final public var isInitialized: Swift.Bool {
    @objc get
  }
  @objc final public var publisherInfo: any BidMachine.BidMachinePublisherInfoProtocol {
    @objc get
  }
  @objc final public var targetingInfo: any BidMachine.BidMachineTargetingInfoProtocol {
    @objc get
  }
  @objc final public var regulationInfo: any BidMachine.BidMachineRegulationInfoProtocol {
    @objc get
  }
  @objc final public var biddingInfo: any BidMachine.BidMachineBiddingInfoProtocol {
    @objc get
  }
  @objc final public func populate(_ builderBlock: (any BidMachine.BidMachineInfoBuilderProtocol) -> Swift.Void)
}
@objc extension BidMachine.BidMachineSdk {
  @objc(notifyMediationWin:) final public func notifyMediationWin(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc(notifyMediationLoss:ecpm:ad:) final public func notifyMediationLoss(_ winner: Swift.String, _ ecpm: Swift.Double, _ ad: any BidMachine.BidMachineAdProtocol)
}
@objc extension BidMachine.BidMachineSdk {
  @nonobjc final public func ad<U>(adType: U.Type, request: BidMachine.BidMachineAuctionRequest? = nil, completion: @escaping (U?, (any Swift.Error)?) -> Swift.Void) where U : BidMachine.BidMachineAdProtocol
  @objc final public func ad(request: BidMachine.BidMachineAuctionRequest?, completion: @escaping ((any BidMachine.BidMachineAdProtocol)?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func interstitial(request: BidMachine.BidMachineAuctionRequest? = nil, completion: @escaping (BidMachine.BidMachineInterstitial?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func rewarded(request: BidMachine.BidMachineAuctionRequest? = nil, completion: @escaping (BidMachine.BidMachineRewarded?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func banner(request: BidMachine.BidMachineAuctionRequest? = nil, completion: @escaping (BidMachine.BidMachineBanner?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func native(request: BidMachine.BidMachineAuctionRequest? = nil, completion: @escaping (BidMachine.BidMachineNative?, (any Swift.Error)?) -> Swift.Void)
}
@objc extension BidMachine.BidMachineSdk {
  @objc final public func registerNetworks(_ configurations: [BidMachine.BidMachineBiddingNetworkConfiguraton])
}
@objc extension BidMachine.BidMachineSdk {
  @objc final public func placement(from format: BidMachine.PlacementFormat, builder: BidMachine.BidMachinePlacementBuilderBlock? = nil) throws -> BidMachine.BidMachinePlacement
}
@objc extension Foundation.NSString {
  @objc dynamic public var bidmachine_placement_format: BidMachine.PlacementFormat {
    @objc get
  }
}
@objc extension BidMachine.BidMachineSdk {
  @objc @available(*, deprecated, message: "Use `auctionRequest(placement:builder:)` instead.")
  final public func requestConfiguration(_ format: BidMachine.PlacementFormat) throws -> any BidMachine.BidMachineRequestConfigurationProtocol
  @objc final public func auctionRequest(placement: BidMachine.BidMachinePlacement, builder: BidMachine.BidMachineAuctionRequestBuilderBlock? = nil) -> BidMachine.BidMachineAuctionRequest
}
public typealias BidMachineRequestBuilderBlock = (any BidMachine.BidMachineRequestBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineRequestBuilderProtocol {
  @objc @discardableResult
  func withPlacementId(_ ID: Swift.String) -> Self
  @objc @discardableResult
  func withTimeout(_ timeout: Swift.Double) -> Self
  @objc @discardableResult
  func withCustomParameters(_ params: [Swift.String : Any]) -> Self
  @objc @discardableResult
  func appendPriceFloor(_ price: Swift.Double, _ name: Swift.String) -> Self
  @objc @discardableResult
  func withPayload(_ payload: Swift.String) -> Self
  @objc @discardableResult
  func withUnitConfigurations(_ configurations: [BidMachine.BidMachineBiddingUnitConfiguration]) -> Self
}
@objc public protocol BidMachineRequestInfoProtocol {
  @objc var placement: BidMachine.BidMachineRequestPlacement { get }
  @objc var placementId: Swift.String? { get }
  @objc var payload: Swift.String? { get }
  @objc var timeout: Swift.Double { get }
  @objc var customParams: [Swift.String : Any] { get }
  @objc var priceFloors: [any BidMachine.BidMachinePriceFloorProtocol] { get }
  @objc var unitsConfigurations: [BidMachine.BidMachineBiddingUnitConfiguration] { get }
}
@objc public protocol BidMachineRequestPopulatorProtocol {
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineRequestBuilderProtocol) -> Swift.Void)
}
@objc public protocol BidMachineRequestConfigurationProtocol : BidMachine.BidMachineRequestInfoProtocol, BidMachine.BidMachineRequestPopulatorProtocol {
}
@_hasMissingDesignatedInitializers @objc public class BidMachineRequestPlacement : ObjectiveC.NSObject {
  final public let placement: BidMachine.Placement
  @objc deinit
}
extension BidMachine.BidMachineRequestPlacement {
  @objc dynamic public var name: Swift.String {
    @objc get
  }
}
@objc extension BidMachine.BidMachineSdk {
  @available(*, deprecated, message: "Use `ad(adType:request:completion:)` instead.")
  @nonobjc final public func ad<U>(_ type: U.Type, _ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (U?, (any Swift.Error)?) -> Swift.Void) where U : BidMachine.BidMachineAdProtocol
  @objc @available(*, deprecated, message: "Use `ad(request:completion:)` instead.")
  final public func ad(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)?, _ completion: @escaping ((any BidMachine.BidMachineAdProtocol)?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, deprecated, message: "Use `interstitial(request:completion:)` instead.")
  final public func interstitial(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineInterstitial?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, deprecated, message: "Use `rewarded(request:completion:)` instead.")
  final public func rewarded(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineRewarded?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, deprecated, message: "Use `banner(request:completion:)` instead.")
  final public func banner(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineBanner?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, deprecated, message: "Use `native(request:completion:)` instead.")
  final public func native(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineNative?, (any Swift.Error)?) -> Swift.Void)
}
@available(*, deprecated, message: "Will be remove")
public struct Placement : Swift.Equatable {
  public let type: BidMachine.PlacementType
  public init(_ type: BidMachine.PlacementType)
  public static func == (lhs: BidMachine.Placement, rhs: BidMachine.Placement) -> Swift.Bool
}
extension BidMachine.BidMachineModel {
  public struct AuctionCreative {
    public var clientParams: BidMachine.BidMachineExtras {
      get
    }
    public var serverParams: BidMachine.BidMachineExtras {
      get
    }
  }
}
extension BidMachine.BidMachineModel {
  public struct BiddingNetworkConfiguration {
    public let name: Swift.String
    public let params: BidMachine.BidMachineExtras
    public let extras: BidMachine.BidMachineExtras
  }
  public struct BiddingUnitConfiguration {
    public let name: Swift.String
    public let adType: BidMachine.PlacementType
    public let params: BidMachine.BidMachineExtras
    public let extras: BidMachine.BidMachineExtras
  }
}
public struct BidMachineExtras {
}
extension BidMachine.BidMachineExtras {
  public static func with(json: [Swift.String : Any]?) -> BidMachine.BidMachineExtras
  public var transform: BidMachine.ExtrasModelTransformer {
    get
  }
}
public struct ExtrasModelTransformer {
}
extension BidMachine.ExtrasModelTransformer {
  public var toJson: [Swift.String : Any] {
    get
  }
}
public struct BidMachineModel {
}
extension BidMachine.BidMachineModel {
  public struct RendererConfiguration {
    public let watermark: Swift.String?
    public static func defaultConfiguration() -> BidMachine.BidMachineModel.RendererConfiguration
  }
}
public protocol BidMachineConnectionTask {
  #if compiler(>=5.3) && $Sendable
  func makeRequest(_ session: Foundation.URLSession, _ request: Foundation.URLRequest, _ completion: @escaping @Sendable (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  #endif
}
public struct ProtoProvider {
  public static func auctionRequest(_ jsonUTF8Data: Foundation.Data) throws -> Foundation.Data
  public static func auctionResponse(_ jsonUTF8Data: Foundation.Data) throws -> Foundation.Data
  public static func sessionRequest(_ jsonUTF8Data: Foundation.Data) throws -> Foundation.Data
  public static func sessionResponse(_ jsonUTF8Data: Foundation.Data) throws -> Foundation.Data
  public static func waterfallContext(_ jsonUTF8Data: Foundation.Data) throws -> Foundation.Data
  public static func waterfallRequest(_ jsonUTF8Data: Foundation.Data) throws -> Foundation.Data
  public static func waterfallResponse(_ jsonUTF8Data: Foundation.Data) throws -> Foundation.Data
}
public struct AnyCodable : Swift.Codable {
  public init<T>(_ value: T?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BidMachine.AnyCodable {
  public func value<T>(_ type: T.Type) -> T?
}
public struct AnyValue {
  public init(_ wrapped: Any?)
  public func value<T>() -> T?
}
public struct ApiEmbeddedCryptoBase32Decoder {
  public init()
  public func decode(_ string: Swift.String, shouldRemovingPercentEncoding: Swift.Bool = true) throws -> Foundation.Data
}
extension BidMachine.ApiEmbeddedCryptoBase32Decoder {
  public enum Error : Swift.Error {
    case invalidEncodedString
    case invalidEncodedStringLength
    public static func == (a: BidMachine.ApiEmbeddedCryptoBase32Decoder.Error, b: BidMachine.ApiEmbeddedCryptoBase32Decoder.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct BidMachineError {
}
extension BidMachine.BidMachineError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension BidMachine.BidMachineError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BidMachine.BidMachineError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var wrappedError: (any Swift.Error)? {
    get
  }
  public var module: Swift.String {
    get
  }
}
public protocol BidMachineErrorTypeBuilder {
  var connection: any BidMachine.BidMachineErrorValueBuilder { get }
  var badContent: any BidMachine.BidMachineErrorValueBuilder { get }
  var timeout: any BidMachine.BidMachineErrorValueBuilder { get }
  var noContent: any BidMachine.BidMachineErrorValueBuilder { get }
  var exception: any BidMachine.BidMachineErrorValueBuilder { get }
  var wasDestroyed: any BidMachine.BidMachineErrorValueBuilder { get }
  var wasExpired: any BidMachine.BidMachineErrorValueBuilder { get }
  var server: any BidMachine.BidMachineErrorValueBuilder { get }
  var badRequest: any BidMachine.BidMachineErrorValueBuilder { get }
  var headerBidding: any BidMachine.BidMachineErrorValueBuilder { get }
  var interior: any BidMachine.BidMachineErrorValueBuilder { get }
  func v2(_ code: BidMachine.BidMachineAnalyticsErrorCode) -> any BidMachine.BidMachineErrorValueBuilder
}
public protocol BidMachineErrorValueBuilder {
  func withDescription(_ description: Swift.String) -> BidMachine.BidMachineError
  func withError(_ description: Swift.String, _ error: (any Swift.Error)?) -> BidMachine.BidMachineError
  func withExeption(_ description: Swift.String, _ error: any Swift.Error) -> BidMachine.BidMachineError
}
public struct ErrorProvider {
  public static func unknown(_ name: Swift.String) -> any BidMachine.BidMachineErrorTypeBuilder
  public static var sdk: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var api: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var adapter: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var network: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var bidding: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var display: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var analytics: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var crypto: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
  public static var event: any BidMachine.BidMachineErrorTypeBuilder {
    get
  }
}
public enum BidMachineAnalyticsErrorCode {
  case invalid
  case undefined
  case monitorUndefined
  case monitorNoContent
  case monitorBadContent
  case readerNoAccess
  case readerUndefined
  case readerNoContent
  case readerBadContent
  public static func == (a: BidMachine.BidMachineAnalyticsErrorCode, b: BidMachine.BidMachineAnalyticsErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Array {
  public func decode<T>(_ value: T.Type) throws -> T where Element == BidMachine.AnyCodable, T : Swift.Decodable
  public func decode<T>(_ value: T.Type) throws -> T where Element == Any, T : Swift.Decodable
}
extension CoreFoundation.CGFloat {
  public var int: Swift.Int {
    get
  }
}
extension Swift.String {
  public static func + (lhs: Swift.String, rhs: (any Swift.Error)?) -> Swift.String
  public static func + (lhs: Swift.String, rhs: [Swift.String : (any Swift.CustomStringConvertible)?]) -> Swift.String
  public static func + (lhs: Swift.String, rhs: Swift.Int) -> Swift.String
  public static func + (lhs: Swift.String, rhs: [any Swift.CustomStringConvertible]) -> Swift.String
}
extension Foundation.URL {
  public func urlPath(shouldPercentEncode: Swift.Bool = false) -> Swift.String
}
public enum ApiEmbeddedExtensionUIApplicationState {
  case active
  case inactive
  case background
  public var isActive: Swift.Bool {
    get
  }
  public static func == (a: BidMachine.ApiEmbeddedExtensionUIApplicationState, b: BidMachine.ApiEmbeddedExtensionUIApplicationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ApiEmbeddedExtensionUIApplicationInterfaceOrientation {
  case portrait, landscape
  public var isPortrait: Swift.Bool {
    get
  }
  public static func == (a: BidMachine.ApiEmbeddedExtensionUIApplicationInterfaceOrientation, b: BidMachine.ApiEmbeddedExtensionUIApplicationInterfaceOrientation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var state: BidMachine.ApiEmbeddedExtensionUIApplicationState {
    get
  }
  @_Concurrency.MainActor(unsafe) public var window: UIKit.UIWindow? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var osVersionWindows: [UIKit.UIWindow] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var interfaceOrientation: BidMachine.ApiEmbeddedExtensionUIApplicationInterfaceOrientation {
    get
  }
}
public protocol BidMachineLoggerListener {
  var id: Swift.String { get }
  func didReceive(level: Swift.String, name: Swift.String, message: Swift.String)
}
extension Foundation.FileManager {
  public func createFile(at path: Swift.String, contents: Foundation.Data?)
  public func fileExists(at path: Swift.String) -> Swift.Bool
  public func removeFile(at path: Swift.String)
}
public protocol KeyValueStorge {
  func getValue<T>(for key: Swift.String) -> T?
  func setValue(_ value: Any?, by key: Swift.String)
  func removeValue(by key: Swift.String)
}
extension Foundation.UserDefaults : BidMachine.KeyValueStorge {
  public func getValue<T>(for key: Swift.String) -> T?
  public func setValue(_ value: Any?, by key: Swift.String)
  public func removeValue(by key: Swift.String)
}
@available(*, deprecated, renamed: "BidMachineSynchronized", message: "Will be remove")
public typealias Synchronized = BidMachine.BidMachineSynchronized
@dynamicMemberLookup final public class BidMachineSynchronized<Value> {
  public init(_ value: Value)
  final public func read<T>(_ operation: (Value) throws -> T) rethrows -> T
  @discardableResult
  final public func write<T>(_ operation: (inout Value) throws -> T) rethrows -> T
  final public subscript<Property>(dynamicMember keyPath: Swift.WritableKeyPath<Value, Property>) -> Property {
    get
    set
  }
  final public subscript<Property>(dynamicMember keyPath: Swift.KeyPath<Value, Property>) -> Property {
    get
  }
  @objc deinit
}
public struct BidMachineTime {
}
extension BidMachine.BidMachineTime {
  public static func timeSince1970() -> BidMachine.BidMachineTime
  public static func timeSince1970(_ interval: Foundation.TimeInterval) -> BidMachine.BidMachineTime
  public var timeInterval: Foundation.TimeInterval {
    get
  }
  public var interval: BidMachine.BidMachineTimeInterval {
    get
  }
  public var date: Foundation.Date {
    get
  }
}
extension BidMachine.BidMachineTime : Swift.Comparable {
  public static func < (lhs: BidMachine.BidMachineTime, rhs: BidMachine.BidMachineTime) -> Swift.Bool
  public static func == (lhs: BidMachine.BidMachineTime, rhs: BidMachine.BidMachineTime) -> Swift.Bool
  public static func + (lhs: BidMachine.BidMachineTime, rhs: BidMachine.BidMachineTimeInterval) -> BidMachine.BidMachineTime
  public static func - (lhs: BidMachine.BidMachineTime, rhs: BidMachine.BidMachineTimeInterval) -> BidMachine.BidMachineTime
  public static func - (lhs: BidMachine.BidMachineTime, rhs: BidMachine.BidMachineTime) -> BidMachine.BidMachineTimeInterval
}
public enum BidMachineTimeInterval {
  case seconds(Swift.Int64)
  case milliseconds(Swift.Int64)
  case microseconds(Swift.Int64)
  case nanoseconds(Swift.Int64)
}
extension BidMachine.BidMachineTimeInterval {
  public var seconds: Swift.Int64 {
    get
  }
  public var milliseconds: Swift.Int64 {
    get
  }
  public var microseconds: Swift.Int64 {
    get
  }
  public var nanoseconds: Swift.Int64 {
    get
  }
}
extension BidMachine.BidMachineTimeInterval : Swift.Comparable {
  public static func < (lhs: BidMachine.BidMachineTimeInterval, rhs: BidMachine.BidMachineTimeInterval) -> Swift.Bool
  public static func == (lhs: BidMachine.BidMachineTimeInterval, rhs: BidMachine.BidMachineTimeInterval) -> Swift.Bool
  public static func + (lhs: BidMachine.BidMachineTimeInterval, rhs: BidMachine.BidMachineTimeInterval) -> BidMachine.BidMachineTimeInterval
  public static func - (lhs: BidMachine.BidMachineTimeInterval, rhs: BidMachine.BidMachineTimeInterval) -> BidMachine.BidMachineTimeInterval
}
public struct BidMachineTimeWall {
}
extension BidMachine.BidMachineTimeWall {
  public static func now() -> BidMachine.BidMachineTimeWall
  public mutating func start()
  public mutating func finish()
}
extension BidMachine.BidMachineTimeWall {
  public var interval: BidMachine.BidMachineTimeInterval {
    get
  }
  public var startTime: BidMachine.BidMachineTime {
    get
  }
  public var finishTime: BidMachine.BidMachineTime {
    get
  }
}
final public class BidMachineExtendedTickTimer {
  public init()
  final public func start(interval: BidMachine.BidMachineTimeInterval, tickInterval: BidMachine.BidMachineTimeInterval, tick: @escaping (_ leeway: BidMachine.BidMachineTimeInterval, _ interval: BidMachine.BidMachineTimeInterval) -> Swift.Void, completion: @escaping (_ interval: BidMachine.BidMachineTimeInterval) -> Swift.Void)
  final public func pause()
  final public func resume()
  final public func invalidate()
  @objc deinit
}
final public class BidMachineTickTimer {
  public init(tick: BidMachine.BidMachineTimeInterval, interval: BidMachine.BidMachineTimeInterval? = nil)
  final public func start(tick: @escaping (_ leeway: BidMachine.BidMachineTimeInterval, _ interval: BidMachine.BidMachineTimeInterval) -> Swift.Void, completion: @escaping (_ interval: BidMachine.BidMachineTimeInterval) -> Swift.Void)
  final public func pause()
  final public func resume()
  final public func invalidate()
  @objc deinit
}
final public class BidMachineTimer {
  final public func start(_ interval: BidMachine.BidMachineTimeInterval, _ periodic: Swift.Bool, _ tick: @escaping () -> Swift.Void)
  final public func invalidate()
  public init()
  @objc deinit
}
public struct BidMachineAdapter {
  public static var adapterVersionPath: Swift.String {
    get
  }
}
public enum OpenMeasureErrorType {
  case generic
  case media
  public static func == (a: BidMachine.OpenMeasureErrorType, b: BidMachine.OpenMeasureErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OpenMeasurePlayerState {
  case normal
  case fullscreen
  public static func == (a: BidMachine.OpenMeasurePlayerState, b: BidMachine.OpenMeasurePlayerState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OpenMeasureEvent {
  case impression
  case click
  case start(_: Swift.Float, _: Foundation.TimeInterval)
  case firstQuartile
  case midpoint
  case thirdQuartile
  case complete
  case pause
  case resume
  case skipped
  case bufferStart
  case bufferFinish
  case volumeChanged(_: Swift.Float)
  case playerStateChanged(_: BidMachine.OpenMeasurePlayerState)
}
public enum OpenMeasureRegisterationType {
  case registerObstructions(_: [BidMachine.OpenMeasureObstruction])
  case unregisterObstruction(_: BidMachine.OpenMeasureObstruction)
  case unregisterAllObstructions
  case registerMainView(_: UIKit.UIView)
  case unregisterMainView
}
public struct OpenMeasureObstruction {
  public enum ObstructionType {
    case media
    case close
    case notVisible
    case other
    public static func == (a: BidMachine.OpenMeasureObstruction.ObstructionType, b: BidMachine.OpenMeasureObstruction.ObstructionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ view: UIKit.UIView, _ type: BidMachine.OpenMeasureObstruction.ObstructionType)
}
public protocol MeasureResource : Swift.Decodable, Swift.Equatable {
  var url: Foundation.URL { get }
  var vendorKey: Swift.String? { get }
  var parameters: Swift.String? { get }
}
public protocol MeasureSessionController : AnyObject {
  func startSession()
  func finishSession()
  func logError(_ type: BidMachine.OpenMeasureErrorType, _ message: Swift.String)
  func notify(_ event: BidMachine.OpenMeasureEvent)
  func register(_ type: BidMachine.OpenMeasureRegisterationType)
}
public protocol MraidMeasureSessionController : BidMachine.MeasureSessionController {
  func prepare(webView: WebKit.WKWebView) throws
  func prepareSession() throws
  func loadedToMeasurement()
}
public protocol VastMeasureSessionController : BidMachine.MeasureSessionController {
  func prepare(resources: [any BidMachine.MeasureResource]) throws
  func loadedToMeasurement(isSkippable: Swift.Bool, offset: Foundation.TimeInterval, isAutoplay: Swift.Bool)
}
public protocol AdaptiveRenderingLoadingDelegate : AnyObject {
  func didLoad(_ rendering: any BidMachine.AdaptiveRenderingProtocol, _ error: BidMachine.BidMachineError?)
  func didExpired(_ rendering: any BidMachine.AdaptiveRenderingProtocol, _ error: BidMachine.BidMachineError)
}
public protocol AdaptiveRenderingPresentingDelegate : AnyObject {
  func didPresent(_ rendering: any BidMachine.AdaptiveRenderingProtocol, _ error: BidMachine.BidMachineError?)
  func didImpression(_ rendering: any BidMachine.AdaptiveRenderingProtocol, _ error: BidMachine.BidMachineError?)
  func didDismiss(_ rendering: any BidMachine.AdaptiveRenderingProtocol)
  func willPresentScreen(_ rendering: any BidMachine.AdaptiveRenderingProtocol, _ error: BidMachine.BidMachineError?)
  func didDismissScreen(_ rendering: any BidMachine.AdaptiveRenderingProtocol)
  func didUserInteraction(_ rendering: any BidMachine.AdaptiveRenderingProtocol)
  func didPresentPartialScreen(_ rendering: any BidMachine.AdaptiveRenderingProtocol, _ error: BidMachine.BidMachineError?)
  func didDismissPartialScreen(_ rendering: any BidMachine.AdaptiveRenderingProtocol)
}
public protocol AdaptiveRenderingProtocol : AnyObject {
  func invalidate()
  func load(_ delegate: (any BidMachine.AdaptiveRenderingLoadingDelegate)?)
  func presentFullscreen(_ controller: UIKit.UIViewController, _ configuration: BidMachine.BidMachineModel.RendererConfiguration, _ delegate: (any BidMachine.AdaptiveRenderingPresentingDelegate)?)
  func presentBanner(_ container: UIKit.UIView, _ controller: UIKit.UIViewController, _ configuration: BidMachine.BidMachineModel.RendererConfiguration, _ delegate: (any BidMachine.AdaptiveRenderingPresentingDelegate)?)
}
public struct AdaptiveRenderingProvider {
  public init(_ configuration: BidMachine.AdaptiveConfiguration)
}
extension BidMachine.AdaptiveRenderingProvider {
  public func rendering() -> any BidMachine.AdaptiveRenderingProtocol
}
extension BidMachine.AdaptiveRenderingProvider {
  public init(dictionary: [Swift.String : Any]) throws
}
public struct AdaptiveConfiguration {
}
public protocol SQLiteEntityKey : Swift.CodingKey {
}
public protocol SQLiteEntity : Swift.Decodable, Swift.Encodable {
  associatedtype T : BidMachine.SQLiteEntityKey
}
extension BidMachine.BidMachineNativeAdRenderingAssetType : Swift.Equatable {}
extension BidMachine.BidMachineNativeAdRenderingAssetType : Swift.Hashable {}
extension BidMachine.BidMachineNativeAdRenderingAssetType : Swift.RawRepresentable {}
extension BidMachine.UserGender : Swift.Equatable {}
extension BidMachine.UserGender : Swift.Hashable {}
extension BidMachine.UserGender : Swift.RawRepresentable {}
extension BidMachine.FrameworkName : Swift.Equatable {}
extension BidMachine.FrameworkName : Swift.Hashable {}
extension BidMachine.FrameworkName : Swift.RawRepresentable {}
extension BidMachine.Gender : Swift.Equatable {}
extension BidMachine.Gender : Swift.Hashable {}
extension BidMachine.Gender : Swift.RawRepresentable {}
extension BidMachine.Currency : Swift.Equatable {}
extension BidMachine.Currency : Swift.Hashable {}
extension BidMachine.Currency : Swift.RawRepresentable {}
extension BidMachine.DeviceType : Swift.Equatable {}
extension BidMachine.DeviceType : Swift.Hashable {}
extension BidMachine.AuctionType : Swift.Equatable {}
extension BidMachine.AuctionType : Swift.Hashable {}
extension BidMachine.ConnectionType : Swift.Equatable {}
extension BidMachine.ConnectionType : Swift.Hashable {}
extension BidMachine.OsType : Swift.Equatable {}
extension BidMachine.OsType : Swift.Hashable {}
extension BidMachine.OSExecutionEnvironment : Swift.Equatable {}
extension BidMachine.OSExecutionEnvironment : Swift.Hashable {}
extension BidMachine.OSExecutionEnvironment : Swift.RawRepresentable {}
extension BidMachine.LocationType : Swift.Equatable {}
extension BidMachine.LocationType : Swift.Hashable {}
extension BidMachine.PlacementFormat : Swift.Equatable {}
extension BidMachine.PlacementFormat : Swift.Hashable {}
extension BidMachine.PlacementFormat : Swift.RawRepresentable {}
extension BidMachine.ApiEmbeddedCryptoBase32Decoder.Error : Swift.Equatable {}
extension BidMachine.ApiEmbeddedCryptoBase32Decoder.Error : Swift.Hashable {}
extension BidMachine.BidMachineAnalyticsErrorCode : Swift.Equatable {}
extension BidMachine.BidMachineAnalyticsErrorCode : Swift.Hashable {}
extension BidMachine.ApiEmbeddedExtensionUIApplicationState : Swift.Equatable {}
extension BidMachine.ApiEmbeddedExtensionUIApplicationState : Swift.Hashable {}
extension BidMachine.ApiEmbeddedExtensionUIApplicationInterfaceOrientation : Swift.Equatable {}
extension BidMachine.ApiEmbeddedExtensionUIApplicationInterfaceOrientation : Swift.Hashable {}
extension BidMachine.OpenMeasureObstruction.ObstructionType : Swift.Equatable {}
extension BidMachine.OpenMeasureObstruction.ObstructionType : Swift.Hashable {}
extension BidMachine.OpenMeasureErrorType : Swift.Equatable {}
extension BidMachine.OpenMeasureErrorType : Swift.Hashable {}
extension BidMachine.OpenMeasurePlayerState : Swift.Equatable {}
extension BidMachine.OpenMeasurePlayerState : Swift.Hashable {}
