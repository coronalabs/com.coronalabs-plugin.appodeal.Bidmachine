// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidMachineAnalyticsCore
@_exported import BidMachineAnalyticsCore
import BidMachineApiCore
import BidMachineDataBase
import BidMachineNetworkCore
import Foundation
import Swift
import _Concurrency
public protocol AnalyticsLogDelegate : AnyObject {
  func receiveLogMessage(_ message: Swift.String)
}
public class Analytics {
  public init(_ configuration: BidMachineAnalyticsCore.AnalyticsConfiguration)
  @objc deinit
}
extension BidMachineAnalyticsCore.Analytics {
  public var metricRegistrator: BidMachineAnalyticsCore.MetricRegistrator {
    get
  }
  public var logDelegate: BidMachineAnalyticsCore.AnalyticsLogDelegate? {
    get
    set
  }
}
public typealias EventMessageBuilderBlock = (BidMachineAnalyticsCore.EventMessageBuilder) -> Swift.Void
public protocol EventMessageBuilder {
  @discardableResult
  func withError(_ error: Swift.Error?) -> Self
  @discardableResult
  func withPrice(_ price: Swift.Double?) -> Self
  @discardableResult
  func withNetwork(_ network: Swift.String?) -> Self
  @discardableResult
  func withStartTime(_ time: Swift.Double?) -> Self
  @discardableResult
  func withFinishTime(_ time: Swift.Double?) -> Self
  @discardableResult
  func withPlacement(_ placement: Swift.String?) -> Self
}
public protocol EventMessageProtocol {
  var error: Swift.Error? { get }
  var price: Swift.Double? { get }
  var network: Swift.String? { get }
  var startTime: Swift.Double? { get }
  var finishTime: Swift.Double? { get }
  var placement: Swift.String? { get }
}
public struct EventConfiguration {
  public let url: Swift.String
  public let errorUrl: Swift.String?
  public let fallbackUrl: Swift.String?
  public init(_ url: Swift.String, _ errorUrl: Swift.String? = nil, _ fallbackUrl: Swift.String? = nil)
}
public struct Event {
  public let code: Swift.Int32
  public init(_ code: Swift.Int32, _ configuration: BidMachineAnalyticsCore.EventConfiguration)
}
public protocol MetricRegistrator {
  func updateConfiguration(_ configurations: [BidMachineAnalyticsCore.MetricConfiguration])
  func register(_ service: BidMachineAnalyticsCore.MetricService)
}
public struct MetricMessage {
  public let name: Swift.String
  public let error: Swift.Error?
  public let data: [Swift.String : Any]?
  public init(_ name: Swift.String, _ error: Swift.Error?, _ data: [Swift.String : Any]?)
}
public protocol MetricServiceDelegate : AnyObject {
  func configuration(_ name: Swift.String) -> BidMachineAnalyticsCore.MetricConfiguration?
  func didPrepareService(_ service: BidMachineAnalyticsCore.MetricService, _ error: Swift.Error?)
  func didLogMessage(_ message: BidMachineAnalyticsCore.MetricMessage)
}
public protocol MetricService : AnyObject {
  var delegate: BidMachineAnalyticsCore.MetricServiceDelegate? { get set }
  var name: Swift.String { get }
  func prepare()
}
public struct MetricKeyConfiguration {
  public var dimensionKeys: [Swift.String] {
    get
  }
  public var measureKeys: [Swift.String] {
    get
  }
  public init()
  public init(_ dimensionKeys: [Swift.String], _ measureKeys: [Swift.String])
}
public struct MetricConfiguration {
  public var name: Swift.String {
    get
  }
  public var keyConfiguration: BidMachineAnalyticsCore.MetricKeyConfiguration {
    get
  }
  public init(_ name: Swift.String)
  public init(_ name: Swift.String, _ keyConfiguration: BidMachineAnalyticsCore.MetricKeyConfiguration)
}
public class EventManager {
  public static var shared: BidMachineAnalyticsCore.EventManager
  public init()
  @objc deinit
}
extension BidMachineAnalyticsCore.EventManager {
  public func track(_ event: BidMachineAnalyticsCore.Event, _ builderBlock: BidMachineAnalyticsCore.EventMessageBuilderBlock?)
}
public enum AnalyticsType : Swift.Int32 {
  case database
  case virtual
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
extension BidMachineAnalyticsCore.AnalyticsType : Swift.Equatable {
}
public struct AnalyticsAgregationConfiguration {
  public var count: Swift.Int32 {
    get
  }
  public var interval: Swift.Int32 {
    get
  }
  public init()
  public init(_ count: Swift.Int32, _ interval: Swift.Int32)
}
public struct AnalyticsConfiguration {
  public let type: BidMachineAnalyticsCore.AnalyticsType
  public let url: Swift.String?
  public let context: Swift.String
  public let agregationConfig: BidMachineAnalyticsCore.AnalyticsAgregationConfiguration
  public init(_ type: BidMachineAnalyticsCore.AnalyticsType, _ url: Swift.String?, _ context: Swift.String, _ config: BidMachineAnalyticsCore.AnalyticsAgregationConfiguration)
}
extension BidMachineAnalyticsCore.AnalyticsType : Swift.Hashable {}
extension BidMachineAnalyticsCore.AnalyticsType : Swift.RawRepresentable {}
